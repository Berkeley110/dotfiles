execute pathogen#infect()
syntax on

"set foldmethod=syntax"
set nowrap        " don"t wrap lines
set tabstop=4     " a tab is four spaces
set backspace=indent,eol,start " allow backspacing over everything in insert mode

set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with "<" and ">""
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type"
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal"s title
set visualbell           " don"t beep
set noerrorbells         " don"t beep"
set nobackup  "disable backups"
set noswapfile "disable backups"
set spell
set mouse=nicr
setlocal spell spelllang=en_us
set expandtab

set list
set listchars=tab:>.,trail:.,extends:#,nbsp:. "mark whitespace"

" Leader Key to ","
let mapleader=","

" remappings
inoremap jj <ESC>
inoremap kk <ESC>

" ,ev to edit vim, ,sv to source vim
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" map down and up to up next row and down next row
nnoremap j gj
nnoremap k gk

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Turns on plugins
filetype plugin on

"Turns on automatic indent from plugins
filetype indent on
"allows empty .tex files to open as latex files
let g:Tex_flavor="latex"
" Change defualt tex output to PDF
let g:Tex_DefaultTargetFormat="pdf"
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
let g:Tex_ViewRule_pdf="preview"
set grepprg=grep\ -nH\ $*

" Solarized Settings
set background=light
" This Sets Solarized theme values in VIM
"let g:solarized_termtrans=1
let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"

"Set vim Colorscheme
colorscheme solarized

" Syntastic Settings
let g:syntastic_mode_map={"mode": "active","active_filetypes": ["vim"],"passive_filetypes": []}"
let g:syntastic_error_symbol="✗"
let g:syntastic_warning_symbol="!"
let g:jshint_highlight_color ="Red"
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]"]

"Tab width changes for js and coffeescript"
autocmd BufNewFile,BufReadPost *.coffee setlocal tabstop=2 sts=2 shiftwidth=2 expandtab
autocmd BufNewFile,BufReadPost *.js setlocal shiftwidth=2 tabstop=2 sts=2 expandtab
" Tab width for Jade
autocmd BufNewFile,BufReadPost *.jade setlocal shiftwidth=4 tabstop=4 sts=4 expandtab

"Auto collapse by indentation"
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
"folding is disabled by default but can be quickly toggled per-file by hitting zi"
autocmd BufRead *.js normal zR

" Remove whitespace markers in htmlxml
autocmd filetype html,xml set listchars-=tab:>.

" Set WSDL files using XML filetype
au BufNewFile,BufRead *.wsdl setlocal ft=xml

" Alias NERDTree to nerd
cnoreabbrev <expr> nerd ((getcmdtype() is# ":" && getcmdline() is# "nerd")?("NERDTree"):("nerd"))
" NERDTree show hidden files
let NERDTreeShowHidden=1
" Let NERDTree autoopen when vim is opened with no files
function! StartUp()
  if 0 == argc()
    NERDTree
  end
endfunction
autocmd VimEnter * call StartUp()

" Alias :UndotreeToggle to ent
cnoreabbrev <expr> ents ((getcmdtype() is# ":" && getcmdline() is# "ents")?("UndotreeToggle"):("ents"))

" Alias Helptags to rbHelp, This makes way more sense to me and will be
" easier to remember
cnoreabbrev <expr> rbHelp ((getcmdtype() is# ":" && getcmdline() is# "rbHelp")?("Helptags"):("rbHelp"))

" Vim Airline
set laststatus=2
set ttimeoutlen=50
" Auto Display all buffers
"let g:airline_left_sep = '>'
"let g:airline_right_sep = '<'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline_theme="badwolf"
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#tmuxline#enabled = 0
let g:tmuxline_powerline_separators=0

let g:tmuxline_preset={
    \ 'a': '#S',
    \ 'b': '#W',
    \ 'c': '#H',
    \ 'win': '#I #W',
    \ 'cwin': '#I #W',
    \ 'x': '%a',
    \ 'y': '#W %R',
    \ 'z': '#H',
    \ 'options':{'status-justify' : 'left'}}

let g:tmuxline_separators = {
    \ 'left' : '▶',
    \ 'left_alt': '>',
    \ 'right' : '◀',
    \ 'right_alt' : '<',
    \ 'space' : ' '}

